Chegar na Pasta do Projeto

cd "C:\Users\jader\OneDrive\Documentos\Projeto Chat Clique Pedagógico"

-------------------------

Ativar o Ambiente Virtual

venv\Scripts\activate

-------------------------

Executar o servidor Flask

python app.py

-------------------------

Teste da API COM acento

$headers = @{
    "Content-Type" = "application/json"
}

$body = @{
    "message" = "Olá, ChatGPT!"
} | ConvertTo-Json

Invoke-RestMethod -Uri http://127.0.0.1:5000/chat -Method Post -Headers $headers -Body $body

------------------------

Teste da API SEM acento


$headers = @{
    "Content-Type" = "application/json"
}

$body = @{
    "message" = "Ola, ChatGPT!"
} | ConvertTo-Json

Invoke-RestMethod -Uri http://127.0.0.1:5000/chat -Method Post -Headers $headers -Body $body

-------------------------

Código Correto

from flask import Flask, request, jsonify
import openai
from dotenv import load_dotenv
import os

app = Flask(__name__)

# Carregar as variáveis do arquivo .env
load_dotenv()

# Configurar a chave da API OpenAI a partir do arquivo .env
openai.api_key = os.getenv('OPENAI_API_KEY')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        user_message = data.get('message')
        
        # Log para verificar o conteúdo da solicitação
        print(f"Received message: {user_message}")

        # Chamada para a API da OpenAI usando a interface correta, tinha um problema na linha abaixo, antigo openai.chatcompletion.creat
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": user_message}
            ],
            temperature=1,
            max_tokens=256,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        
        # Acessar o conteúdo da resposta corretamente, havia um erro na linha abaixo message[content]
        reply = response.choices[0].message.content
        return jsonify({"response": reply})

    except Exception as e:
        # Log de erro
        print(f"Error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "Bem-vindo ao Chat! Use a rota /chat para interagir com o ChatGPT."

if __name__ == '__main__':
    app.run(debug=True)




----------------------------------


Código Antigo:
from flask import Flask, request, jsonify
import openai
from dotenv import load_dotenv
import os

app = Flask(__name__)

# Carregar as variáveis do arquivo .env
load_dotenv()

# Configurar a chave da API OpenAI a partir do arquivo .env
openai.api_key = os.getenv('OPENAI_API_KEY')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_message = data.get('message')

    # Chamada para a API da OpenAI usando ChatCompletion
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": user_message}
        ]
    )

    # Retornar a resposta do modelo para o cliente
    return jsonify({"response": response['choices'][0]['message']['content']})

@app.route('/')
def index():
    return "Bem-vindo ao Chat! Use a rota /chat para interagir com o ChatGPT."

if __name__ == '__main__':
    app.run(debug=True)
---------------------------------------------

from flask import Flask, request, jsonify
import openai
from dotenv import load_dotenv
import os

app = Flask(__name__)

# Carregar as variáveis do arquivo .env
load_dotenv()

# Configurar a chave da API OpenAI a partir do arquivo .env
openai.api_key = os.getenv('OPENAI_API_KEY')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_message = data.get('message')

    # Chamada para a API da OpenAI usando a interface correta
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful assistant."
                },
                {
                    "role": "user",
                    "content": user_message
                }
            ],
            temperature=1,
            max_tokens=256,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        return jsonify({"response": response.choices[0].message['content']})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "Bem-vindo ao Chat! Use a rota /chat para interagir com o ChatGPT."

if __name__ == '__main__':
    app.run(debug=True)

-----------------------------------------------------

Novo Código já com as Instruções

from flask import Flask, request, jsonify
import openai
from dotenv import load_dotenv
import os
from config_assistente import INSTRUCTIONS, FUNCIONALIDADES, verificar_conteudo_inapropriado

app = Flask(__name__)

# Carregar as variáveis do arquivo .env
load_dotenv()

# Configurar a chave da API OpenAI a partir do arquivo .env
openai.api_key = os.getenv('OPENAI_API_KEY')

# Função para gerar imagens
def gerar_imagem(descricao):
    try:
        response = openai.Image.create(
            prompt=descricao,
            n=1,
            size="1024x1024"
        )
        return response['data'][0]['url']
    except Exception as e:
        return f"Erro ao gerar imagem: {str(e)}"

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        user_message = data.get('message')
        funcionalidade = data.get('funcionalidade')

        # Verifica se a mensagem contém conteúdo impróprio
        if verificar_conteudo_inapropriado(user_message):
            return jsonify({"response": "A mensagem contém conteúdo impróprio. Por favor, faça outra pergunta relacionada ao contexto pedagógico."})

        # Se a funcionalidade for geração de imagem
        if funcionalidade == 'gerar_imagem':
            descricao_imagem = data.get('descricao')
            url_imagem = gerar_imagem(descricao_imagem)
            return jsonify({"image_url": url_imagem})

        # Instrução específica baseada na funcionalidade escolhida
        instruction = FUNCIONALIDADES.get(funcionalidade, INSTRUCTIONS)

        # Chamada para a API da OpenAI
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=256,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        
        reply = response.choices[0].message.content
        return jsonify({"response": reply})

    except Exception as e:
        # Log de erro
        print(f"Error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "Bem-vindo ao Chat! Use a rota /chat para interagir com o ChatGPT."

if __name__ == '__main__':
    app.run(debug=True)

--------------------------------------------

1º Index 

<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Assistente Educacional</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      display: flex;
      height: 100vh;
      margin: 0;
    }
    #sidebar {
      background-color: #6a1b9a;
      color: white;
      width: 250px;
      padding: 20px;
    }
    #main-content {
      flex-grow: 1;
      padding: 20px;
    }
    .question-list {
      margin-bottom: 30px;
    }
    .history {
      background-color: #8e24aa;
      padding: 10px;
      margin-top: 20px;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div id="sidebar">
    <h2>Chats</h2>
    <div class="question-list">
      <button class="btn btn-light btn-block mb-2" onclick="newConversation('Tire uma Dúvida')">Tire uma Dúvida</button>
      <button class="btn btn-light btn-block mb-2" onclick="newConversation('Construtor de Relatórios')">Construtor de Relatórios</button>
      <button class="btn btn-light btn-block mb-2" onclick="newConversation('Construtor de Planos de Aula')">Construtor de Planos de Aulas</button>
      <button class="btn btn-light btn-block mb-2" onclick="newConversation('Gerador de Ideias')">Gerador de Ideias</button>
    </div>
    <h3>Histórico de Conversas</h3>
    <div class="history">
      <p>1. Conversa anterior...</p>
      <p>2. Conversa anterior...</p>
      <p>3. Conversa anterior...</p>
    </div>
  </div>

  <!-- Main Content -->
  <div id="main-content">
    <h1>Olá!!! Eu sou a Vix, sua assistente educacional.</h1>
    <div id="chat-box">
      <!-- Aqui ficará a interação do chat -->
    </div>
    <textarea id="user-input" class="form-control mt-3" placeholder="Escreva sua mensagem aqui"></textarea>
    <button class="btn btn-primary mt-2" onclick="sendMessage()">Enviar</button>
  </div>

  <script>
    function newConversation(tipo) {
      document.getElementById('chat-box').innerHTML = `<h2>Nova Conversa: ${tipo}</h2>`;
    }

    function sendMessage() {
      let message = document.getElementById('user-input').value;
      document.getElementById('chat-box').innerHTML += `<p><strong>Você:</strong> ${message}</p>`;
      
      // Enviar a mensagem para o servidor Flask
      fetch('/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: message, funcionalidade: 'tire-uma-duvida' })
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('chat-box').innerHTML += `<p><strong>Assistente:</strong> ${data.response}</p>`;
      });
    }
  </script>

</body>
</html>

________________________________________________

<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Assistente Educacional</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      display: flex;
      flex-direction: row;
      height: 100vh;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    #sidebar {
      background-color: #6a1b9a;
      color: white;
      width: 250px;
      padding: 20px;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      transition: width 0.3s ease;
    }
    #sidebar.recolhido {
      width: 50px;
    }
    #sidebar h2, #sidebar h3, #sidebar button, #sidebar p {
      transition: opacity 0.3s ease;
    }
    #sidebar.recolhido h2, #sidebar.recolhido h3, #sidebar.recolhido button, #sidebar.recolhido p {
      opacity: 0;
    }
    #main-content {
      flex-grow: 1;
      padding: 20px;
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    .question-list button {
      width: 100%;
      text-align: left;
      margin-bottom: 5px; /* Aproxima os botões do título "Chats" */
      font-size: 16px; 
      padding: 10px;   
    }
    .history {
      padding: 10px 0; /* Aproxima os históricos do título "Histórico de Conversas" */
    }
    #chat-box {
      flex-grow: 1;
      overflow-y: auto;
      padding: 15px;
    }
    .user-message {
      text-align: right;
      margin: 10px 0;
    }
    .user-message p {
      display: inline-block;
      background-color: #dcf8c6;
      padding: 10px;
      border-radius: 15px;
      max-width: 80%;
    }
    .assistant-message {
      text-align: left;
      margin: 10px 0;
      display: flex;
      align-items: center;
    }
    .assistant-message p {
      display: inline-block;
      background-color: #e1e1e1;
      padding: 10px;
      border-radius: 15px;
      max-width: 80%;
      white-space: pre-wrap;
    }
    #user-input {
      margin-top: 10px;
      resize: none;
      overflow: hidden;
    }
    button {
      margin-top: 10px;
    }
    #logo-container {
      display: flex;
      align-items: center;
      margin-bottom: 15px; /* Ajuste para caber no espaço */
    }
    #logo {
      width: 40px;
      height: auto;
      margin-right: 10px;
    }
    #vix-name {
      font-size: 16px; /* Ajustado para caber no topo da coluna */
    }
    #toggle-sidebar {
      background-color: #6a1b9a;
      color: white;
      border: none;
      position: absolute;
      top: 10px;
      left: 260px;
      cursor: pointer;
      transition: left 0.3s ease;
    }
    #sidebar.recolhido + #toggle-sidebar {
      left: 60px;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div id="sidebar">
    <div id="logo-container">
      <img id="logo" src="{{ url_for('static', filename='Logo Clique Pedagógico.png') }}" alt="Logotipo"> 
      <h1 id="vix-name">Olá! Eu sou a Vix, sua assistente educacional.</h1>
    </div>
    <h2>Chats</h2>
    <div class="question-list">
      <button class="btn btn-light" onclick="newConversation('Tire uma Dúvida')">Tire uma Dúvida</button>
      <button class="btn btn-light" onclick="newConversation('Construtor de Relatórios')">Construtor de Relatórios</button>
      <button class="btn btn-light" onclick="newConversation('Construtor de Planos de Aula')">Construtor de Planos de Aulas</button>
      <button class="btn btn-light" onclick="newConversation('Gerador de Ideias')">Gerador de Ideias</button>
    </div>
    <h3>Histórico de Conversas</h3>
    <div class="history">
      <p>1. Conversa anterior...</p>
      <p>2. Conversa anterior...</p>
      <p>3. Conversa anterior...</p>
    </div>
  </div>

  <!-- Botão de recolhimento -->
  <button id="toggle-sidebar" onclick="toggleSidebar()">⬅</button>

  <!-- Main Content -->
  <div id="main-content">
    <div id="chat-box">
      <!-- Aqui ficará a interação do chat -->
    </div>
    <textarea id="user-input" class="form-control mt-3" placeholder="Escreva sua mensagem aqui" oninput="autoResize(this)"></textarea>
    <button class="btn btn-primary" onclick="sendMessage()">Enviar</button>
  </div>

  <script>
    function newConversation(tipo) {
      document.getElementById('chat-box').innerHTML = `<h2>Nova Conversa: ${tipo}</h2>`;
    }

    function sendMessage() {
      let message = document.getElementById('user-input').value;

      if (message.trim() === "") {
        return; // Evitar enviar mensagem vazia
      }

      // Exibe a mensagem do usuário no lado direito
      document.getElementById('chat-box').innerHTML += `<div class="user-message"><p>${message}</p></div>`;

      // Enviar a mensagem para o servidor Flask
      fetch('/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: message, funcionalidade: 'tire-uma-duvida' })
      })
      .then(response => response.json())
      .then(data => {
        // Exibe a resposta do assistente no lado esquerdo com formatação adequada e exibição da logo
        document.getElementById('chat-box').innerHTML += `<div class="assistant-message"><img src="{{ url_for('static', filename='Logo Clique Pedagógico.png') }}" alt="Vix" style="width: 40px; margin-right: 10px;"><p><strong>Vix:</strong> ${data.response}</p></div>`;
        document.getElementById('chat-box').scrollTop = document.getElementById('chat-box').scrollHeight; // Rola para o final do chat
      });

      // Limpar a caixa de texto após o envio
      document.getElementById('user-input').value = "";
      autoResize(document.getElementById('user-input')); // Redefine a altura após o envio
    }

    // Função para auto ajustar o tamanho do textarea
    function autoResize(textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = textarea.scrollHeight + 'px';
    }

    // Função para recolher/expandir a barra lateral
    function toggleSidebar() {
      document.getElementById('sidebar').classList.toggle('recolhido');
    }
  </script>

</body>
</html>

------------------------------------------------------------------------

app.py 12-09-24 funcionando tudo menos a geração de imagem.

from flask import Flask, render_template, request, jsonify
import openai
from dotenv import load_dotenv
import os
from config_assistente import INSTRUCTIONS, FUNCIONALIDADES, verificar_conteudo_inapropriado

app = Flask(__name__)

# Carregar as variáveis do arquivo .env
load_dotenv()

# Configurar a chave da API OpenAI a partir do arquivo .env
openai.api_key = os.getenv('OPENAI_API_KEY')

# Função para gerar imagens
def gerar_imagem(descricao):
    try:
       response = response = openai.images.generate(
            model="dall-e-3",
            prompt=descricao,
            size="1024x1024",
            quality="standard",
            n=1
        )
       image_url = response.data[0].url
       return image_url
    except Exception as e:
        return f"Erro ao gerar imagem: {str(e)}"

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        user_message = data.get('message')
        funcionalidade = data.get('funcionalidade')

        # Verifica se a mensagem contém conteúdo impróprio
        if verificar_conteudo_inapropriado(user_message):
            return jsonify({"response": "A mensagem contém conteúdo impróprio. Por favor, faça outra pergunta relacionada ao contexto pedagógico."})

        # Se a funcionalidade for geração de imagem
        if funcionalidade == 'gerar_imagem':
            descricao_imagem = data.get('descricao')
            url_imagem = gerar_imagem(descricao_imagem)
            return jsonify({"image_url": url_imagem})

        # Instrução específica baseada na funcionalidade escolhida
        instruction = FUNCIONALIDADES.get(funcionalidade, INSTRUCTIONS)

        # Chamada para a API da OpenAI
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=256,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        
        reply = response.choices[0].message.content
        return jsonify({"response": reply})

    except Exception as e:
        # Log de erro
        print(f"Error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return render_template('index.html')  # Carrega o arquivo index.html da pasta templates

if __name__ == '__main__':
    app.run(debug=True)

--------------------------------------------------


 